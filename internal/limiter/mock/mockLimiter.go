// Code generated by MockGen. DO NOT EDIT.
// Source: go-rate-limiter/internal/limiter (interfaces: Limiter)

// Package mockLimiter is a generated GoMock package.
package mockLimiter

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockLimiter is a mock of Limiter interface
type MockLimiter struct {
	ctrl     *gomock.Controller
	recorder *MockLimiterMockRecorder
}

// MockLimiterMockRecorder is the mock recorder for MockLimiter
type MockLimiterMockRecorder struct {
	mock *MockLimiter
}

// NewMockLimiter creates a new mock instance
func NewMockLimiter(ctrl *gomock.Controller) *MockLimiter {
	mock := &MockLimiter{ctrl: ctrl}
	mock.recorder = &MockLimiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLimiter) EXPECT() *MockLimiterMockRecorder {
	return m.recorder
}

// Check mocks base method
func (m *MockLimiter) Check(arg0 string) (int, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Check indicates an expected call of Check
func (mr *MockLimiterMockRecorder) Check(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockLimiter)(nil).Check), arg0)
}

// GetRequestWindow mocks base method
func (m *MockLimiter) GetRequestWindow() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestWindow")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetRequestWindow indicates an expected call of GetRequestWindow
func (mr *MockLimiterMockRecorder) GetRequestWindow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestWindow", reflect.TypeOf((*MockLimiter)(nil).GetRequestWindow))
}

// GetReuqestLimit mocks base method
func (m *MockLimiter) GetReuqestLimit() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReuqestLimit")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetReuqestLimit indicates an expected call of GetReuqestLimit
func (mr *MockLimiterMockRecorder) GetReuqestLimit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReuqestLimit", reflect.TypeOf((*MockLimiter)(nil).GetReuqestLimit))
}

// Take mocks base method
func (m *MockLimiter) Take(arg0 string) (int, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Take", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Take indicates an expected call of Take
func (mr *MockLimiterMockRecorder) Take(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Take", reflect.TypeOf((*MockLimiter)(nil).Take), arg0)
}
